/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Vectors } from "./Vectors";
import { VectorsCountArgs } from "./VectorsCountArgs";
import { VectorsFindManyArgs } from "./VectorsFindManyArgs";
import { VectorsFindUniqueArgs } from "./VectorsFindUniqueArgs";
import { CreateVectorsArgs } from "./CreateVectorsArgs";
import { UpdateVectorsArgs } from "./UpdateVectorsArgs";
import { DeleteVectorsArgs } from "./DeleteVectorsArgs";
import { QueriesFindManyArgs } from "../../queries/base/QueriesFindManyArgs";
import { Queries } from "../../queries/base/Queries";
import { Documents } from "../../documents/base/Documents";
import { VectorsService } from "../vectors.service";
@graphql.Resolver(() => Vectors)
export class VectorsResolverBase {
  constructor(protected readonly service: VectorsService) {}

  async _vectorsItemsMeta(
    @graphql.Args() args: VectorsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Vectors])
  async vectorsItems(
    @graphql.Args() args: VectorsFindManyArgs
  ): Promise<Vectors[]> {
    return this.service.vectorsItems(args);
  }

  @graphql.Query(() => Vectors, { nullable: true })
  async vectors(
    @graphql.Args() args: VectorsFindUniqueArgs
  ): Promise<Vectors | null> {
    const result = await this.service.vectors(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Vectors)
  async createVectors(
    @graphql.Args() args: CreateVectorsArgs
  ): Promise<Vectors> {
    return await this.service.createVectors({
      ...args,
      data: {
        ...args.data,

        document: args.data.document
          ? {
              connect: args.data.document,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Vectors)
  async updateVectors(
    @graphql.Args() args: UpdateVectorsArgs
  ): Promise<Vectors | null> {
    try {
      return await this.service.updateVectors({
        ...args,
        data: {
          ...args.data,

          document: args.data.document
            ? {
                connect: args.data.document,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Vectors)
  async deleteVectors(
    @graphql.Args() args: DeleteVectorsArgs
  ): Promise<Vectors | null> {
    try {
      return await this.service.deleteVectors(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Queries], { name: "queriesItems" })
  async findQueriesItems(
    @graphql.Parent() parent: Vectors,
    @graphql.Args() args: QueriesFindManyArgs
  ): Promise<Queries[]> {
    const results = await this.service.findQueriesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Documents, {
    nullable: true,
    name: "document",
  })
  async getDocument(
    @graphql.Parent() parent: Vectors
  ): Promise<Documents | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
