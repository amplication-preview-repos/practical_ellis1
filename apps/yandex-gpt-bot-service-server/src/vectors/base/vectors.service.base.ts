/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Vectors as PrismaVectors,
  Queries as PrismaQueries,
  Documents as PrismaDocuments,
} from "@prisma/client";

export class VectorsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VectorsCountArgs, "select">): Promise<number> {
    return this.prisma.vectors.count(args);
  }

  async vectorsItems(
    args: Prisma.VectorsFindManyArgs
  ): Promise<PrismaVectors[]> {
    return this.prisma.vectors.findMany(args);
  }
  async vectors(
    args: Prisma.VectorsFindUniqueArgs
  ): Promise<PrismaVectors | null> {
    return this.prisma.vectors.findUnique(args);
  }
  async createVectors(args: Prisma.VectorsCreateArgs): Promise<PrismaVectors> {
    return this.prisma.vectors.create(args);
  }
  async updateVectors(args: Prisma.VectorsUpdateArgs): Promise<PrismaVectors> {
    return this.prisma.vectors.update(args);
  }
  async deleteVectors(args: Prisma.VectorsDeleteArgs): Promise<PrismaVectors> {
    return this.prisma.vectors.delete(args);
  }

  async findQueriesItems(
    parentId: string,
    args: Prisma.QueriesFindManyArgs
  ): Promise<PrismaQueries[]> {
    return this.prisma.vectors
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queriesItems(args);
  }

  async getDocument(parentId: string): Promise<PrismaDocuments | null> {
    return this.prisma.vectors
      .findUnique({
        where: { id: parentId },
      })
      .document();
  }
}
