/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Queries } from "./Queries";
import { QueriesCountArgs } from "./QueriesCountArgs";
import { QueriesFindManyArgs } from "./QueriesFindManyArgs";
import { QueriesFindUniqueArgs } from "./QueriesFindUniqueArgs";
import { CreateQueriesArgs } from "./CreateQueriesArgs";
import { UpdateQueriesArgs } from "./UpdateQueriesArgs";
import { DeleteQueriesArgs } from "./DeleteQueriesArgs";
import { Vectors } from "../../vectors/base/Vectors";
import { QueriesService } from "../queries.service";
@graphql.Resolver(() => Queries)
export class QueriesResolverBase {
  constructor(protected readonly service: QueriesService) {}

  async _queriesItemsMeta(
    @graphql.Args() args: QueriesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Queries])
  async queriesItems(
    @graphql.Args() args: QueriesFindManyArgs
  ): Promise<Queries[]> {
    return this.service.queriesItems(args);
  }

  @graphql.Query(() => Queries, { nullable: true })
  async queries(
    @graphql.Args() args: QueriesFindUniqueArgs
  ): Promise<Queries | null> {
    const result = await this.service.queries(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Queries)
  async createQueries(
    @graphql.Args() args: CreateQueriesArgs
  ): Promise<Queries> {
    return await this.service.createQueries({
      ...args,
      data: {
        ...args.data,

        vector: args.data.vector
          ? {
              connect: args.data.vector,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Queries)
  async updateQueries(
    @graphql.Args() args: UpdateQueriesArgs
  ): Promise<Queries | null> {
    try {
      return await this.service.updateQueries({
        ...args,
        data: {
          ...args.data,

          vector: args.data.vector
            ? {
                connect: args.data.vector,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Queries)
  async deleteQueries(
    @graphql.Args() args: DeleteQueriesArgs
  ): Promise<Queries | null> {
    try {
      return await this.service.deleteQueries(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Vectors, {
    nullable: true,
    name: "vector",
  })
  async getVector(@graphql.Parent() parent: Queries): Promise<Vectors | null> {
    const result = await this.service.getVector(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
