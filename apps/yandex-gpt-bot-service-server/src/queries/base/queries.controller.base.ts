/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QueriesService } from "../queries.service";
import { QueriesCreateInput } from "./QueriesCreateInput";
import { Queries } from "./Queries";
import { QueriesFindManyArgs } from "./QueriesFindManyArgs";
import { QueriesWhereUniqueInput } from "./QueriesWhereUniqueInput";
import { QueriesUpdateInput } from "./QueriesUpdateInput";

export class QueriesControllerBase {
  constructor(protected readonly service: QueriesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Queries })
  async createQueries(
    @common.Body() data: QueriesCreateInput
  ): Promise<Queries> {
    return await this.service.createQueries({
      data: {
        ...data,

        vector: data.vector
          ? {
              connect: data.vector,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        queryText: true,
        responseText: true,

        vector: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Queries] })
  @ApiNestedQuery(QueriesFindManyArgs)
  async queriesItems(@common.Req() request: Request): Promise<Queries[]> {
    const args = plainToClass(QueriesFindManyArgs, request.query);
    return this.service.queriesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        queryText: true,
        responseText: true,

        vector: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Queries })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async queries(
    @common.Param() params: QueriesWhereUniqueInput
  ): Promise<Queries | null> {
    const result = await this.service.queries({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        queryText: true,
        responseText: true,

        vector: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Queries })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQueries(
    @common.Param() params: QueriesWhereUniqueInput,
    @common.Body() data: QueriesUpdateInput
  ): Promise<Queries | null> {
    try {
      return await this.service.updateQueries({
        where: params,
        data: {
          ...data,

          vector: data.vector
            ? {
                connect: data.vector,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          queryText: true,
          responseText: true,

          vector: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Queries })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQueries(
    @common.Param() params: QueriesWhereUniqueInput
  ): Promise<Queries | null> {
    try {
      return await this.service.deleteQueries({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          queryText: true,
          responseText: true,

          vector: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
