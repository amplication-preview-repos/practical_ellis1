/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Queries as PrismaQueries,
  Vectors as PrismaVectors,
} from "@prisma/client";

export class QueriesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QueriesCountArgs, "select">): Promise<number> {
    return this.prisma.queries.count(args);
  }

  async queriesItems(
    args: Prisma.QueriesFindManyArgs
  ): Promise<PrismaQueries[]> {
    return this.prisma.queries.findMany(args);
  }
  async queries(
    args: Prisma.QueriesFindUniqueArgs
  ): Promise<PrismaQueries | null> {
    return this.prisma.queries.findUnique(args);
  }
  async createQueries(args: Prisma.QueriesCreateArgs): Promise<PrismaQueries> {
    return this.prisma.queries.create(args);
  }
  async updateQueries(args: Prisma.QueriesUpdateArgs): Promise<PrismaQueries> {
    return this.prisma.queries.update(args);
  }
  async deleteQueries(args: Prisma.QueriesDeleteArgs): Promise<PrismaQueries> {
    return this.prisma.queries.delete(args);
  }

  async getVector(parentId: string): Promise<PrismaVectors | null> {
    return this.prisma.queries
      .findUnique({
        where: { id: parentId },
      })
      .vector();
  }
}
