/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Documents as PrismaDocuments,
  Vectors as PrismaVectors,
} from "@prisma/client";

export class DocumentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DocumentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.documents.count(args);
  }

  async documentsItems(
    args: Prisma.DocumentsFindManyArgs
  ): Promise<PrismaDocuments[]> {
    return this.prisma.documents.findMany(args);
  }
  async documents(
    args: Prisma.DocumentsFindUniqueArgs
  ): Promise<PrismaDocuments | null> {
    return this.prisma.documents.findUnique(args);
  }
  async createDocuments(
    args: Prisma.DocumentsCreateArgs
  ): Promise<PrismaDocuments> {
    return this.prisma.documents.create(args);
  }
  async updateDocuments(
    args: Prisma.DocumentsUpdateArgs
  ): Promise<PrismaDocuments> {
    return this.prisma.documents.update(args);
  }
  async deleteDocuments(
    args: Prisma.DocumentsDeleteArgs
  ): Promise<PrismaDocuments> {
    return this.prisma.documents.delete(args);
  }

  async findVectorsItems(
    parentId: string,
    args: Prisma.VectorsFindManyArgs
  ): Promise<PrismaVectors[]> {
    return this.prisma.documents
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .vectorsItems(args);
  }
}
