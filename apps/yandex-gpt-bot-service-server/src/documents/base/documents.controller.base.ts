/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocumentsService } from "../documents.service";
import { DocumentsCreateInput } from "./DocumentsCreateInput";
import { Documents } from "./Documents";
import { DocumentsFindManyArgs } from "./DocumentsFindManyArgs";
import { DocumentsWhereUniqueInput } from "./DocumentsWhereUniqueInput";
import { DocumentsUpdateInput } from "./DocumentsUpdateInput";
import { VectorsFindManyArgs } from "../../vectors/base/VectorsFindManyArgs";
import { Vectors } from "../../vectors/base/Vectors";
import { VectorsWhereUniqueInput } from "../../vectors/base/VectorsWhereUniqueInput";

export class DocumentsControllerBase {
  constructor(protected readonly service: DocumentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Documents })
  async createDocuments(
    @common.Body() data: DocumentsCreateInput
  ): Promise<Documents> {
    return await this.service.createDocuments({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        filePath: true,
        fileContent: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Documents] })
  @ApiNestedQuery(DocumentsFindManyArgs)
  async documentsItems(@common.Req() request: Request): Promise<Documents[]> {
    const args = plainToClass(DocumentsFindManyArgs, request.query);
    return this.service.documentsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        filePath: true,
        fileContent: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Documents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async documents(
    @common.Param() params: DocumentsWhereUniqueInput
  ): Promise<Documents | null> {
    const result = await this.service.documents({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        filePath: true,
        fileContent: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Documents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocuments(
    @common.Param() params: DocumentsWhereUniqueInput,
    @common.Body() data: DocumentsUpdateInput
  ): Promise<Documents | null> {
    try {
      return await this.service.updateDocuments({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          fileName: true,
          filePath: true,
          fileContent: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Documents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocuments(
    @common.Param() params: DocumentsWhereUniqueInput
  ): Promise<Documents | null> {
    try {
      return await this.service.deleteDocuments({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          fileName: true,
          filePath: true,
          fileContent: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/vectorsItems")
  @ApiNestedQuery(VectorsFindManyArgs)
  async findVectorsItems(
    @common.Req() request: Request,
    @common.Param() params: DocumentsWhereUniqueInput
  ): Promise<Vectors[]> {
    const query = plainToClass(VectorsFindManyArgs, request.query);
    const results = await this.service.findVectorsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        vectorData: true,
        vectorId: true,

        document: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/vectorsItems")
  async connectVectorsItems(
    @common.Param() params: DocumentsWhereUniqueInput,
    @common.Body() body: VectorsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vectorsItems: {
        connect: body,
      },
    };
    await this.service.updateDocuments({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/vectorsItems")
  async updateVectorsItems(
    @common.Param() params: DocumentsWhereUniqueInput,
    @common.Body() body: VectorsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vectorsItems: {
        set: body,
      },
    };
    await this.service.updateDocuments({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/vectorsItems")
  async disconnectVectorsItems(
    @common.Param() params: DocumentsWhereUniqueInput,
    @common.Body() body: VectorsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vectorsItems: {
        disconnect: body,
      },
    };
    await this.service.updateDocuments({
      where: params,
      data,
      select: { id: true },
    });
  }
}
